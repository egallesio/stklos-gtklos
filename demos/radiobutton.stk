;;;;
;;;; radiobutton.stk			-- GTK Radio Button Demo
;;;; 
;;;; Copyright Â© 2000-2009 Erick Gallesio - I3S-CNRS/ESSI <eg@unice.fr>
;;;; 
;;;; 
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;; 
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
;;;; USA.
;;;; 
;;;;           Author: Erick Gallesio [eg@unice.fr]
;;;;    Creation date: 25-Aug-2000 15:34 (eg)
;;;; Last file update: 22-May-2009 20:03 (eg)
;;;;

(include "gtklos-demo.stk")

(define (main args)
  (let* ((win    (make <demo-window> :title "STklos Radio Buttons"
		       :border-width 10 :padding 10
		       :file "radiobutton" :message "
Radio Button Demo

Some GTklos radio buttons and two buttons to give them life.
"))
	 (box0   (make <vbox> :parent win))
	 (radio1 (make <radio-button>
		   :parent box0
		   :title "Radio Group 1"
		   :orientation 'horizontal
		   :texts '("One" "Two" "Three" "Four" "Five")
		   :tooltip "A tooltip"
		   :border-width 10
		   :value "Two"
		   :command (lambda (e)
			      (format #t "Radio group #1: ~S\n"
				      (text (event-widget e))))))
	 (box1    (make <box> :parent box0 :orientation 'horizontal
			:homogeneous #t :fill #t :padding 5))
	 (radio2  (make <radio-button>
		    :parent box1
		    :title "Radio Group 2"
		    :orientation 'vertical
		    :texts '("Un" "Deux" "Trois" "Quatre" "Cinq")
		    :tooltip '("1" "2" "3" "4" "5")
		    :border-width 10
		    :value "Cinq"
		    :command (lambda (e)
			       (format #t "Radio group #2: ~S\n"
				       (text (event-widget e))))))
	 (box2	  (make <box> :parent box1))
	 (but1    (make <button>
		    :text "Value of Radio 2"
		    :parent box2
		    :command (lambda (_)
			       (format #t "Radio 2 value: ~S\n" (value radio2)))))
	 (but2    (make <button>
		    :text "Change Radio 2"
		    :parent box2
		    :command (let ((l (reverse (texts radio2))))
			       (set-cdr! (last-pair l) l)
			       (lambda (_)
				 (set! l (cdr l))
				 (set! (value radio2) (car l)))))))
    (gtk-main)
    0))
