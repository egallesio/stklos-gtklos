;;;;
;;;; colorselector.stk	-- GTK Color Selector Window
;;;; 
;;;; Copyright Â© 2000-2009 Erick Gallesio - I3S-CNRS/ESSI <eg@unice.fr>
;;;; 
;;;; 
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;; 
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
;;;; USA.
;;;; 
;;;;           Author: Erick Gallesio [eg@unice.fr]
;;;;    Creation date:  6-Nov-2000 18:59 (eg)
;;;; Last file update: 14-Jul-2009 00:06 (eg)
;;;;

(include "gtklos-demo.stk")

(define color-msg "
This is a demo of the Color selector Widget.

The button \"Selector Dialog\" show how to use the
function make-color-selector-dialog for a modal
selection window.
")

(define (make-color initial-color)
  (let ((r (make-color-selector-dialog :value initial-color)))
    (if r
	(format #t "You choose the color ~S\n" r)
	(format #t "No color chosen\n"))))


(define (main args)
  (let* ((win (make <demo-window> :title "Color Selector Demo" :x 100 :y 100
		    		  :file "colorselector" :border-width 5
				  :message color-msg))
	 (col (make <color-selector>  :value "#3f2a5f" :parent win))
	 (bot (make <hbox> :border-width 20 :fill #t :expand #t :parent win)))
    (make <button> :parent bot :text "Display color choosed"
	  :command (lambda (_)
		     (let ((c (value col)))
		       (eprintf "Color choosed: ~S (opacity ~S)\n"
				(car c) (cdr c)))))
    (make <button> :text "Use a modal dialog" :parent bot
	  :command (lambda (e) 
		     (let ((r (make-color-selector-dialog :value (value col))))
		       (if r
			   (eprintf "You choose the color ~S (opacity ~S)\n"
				      (car r) (cdr r))
			   (eprintf "No color chosen\n")))))
    (gtk-main)))
