;;;;
;;;; widget.stk					-- GTK widget
;;;; 
;;;; Copyright © 2001-2009 Erick Gallesio - I3S-CNRS/ESSI <eg@unice.fr>
;;;; 
;;;; 
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;; 
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
;;;; USA.
;;;; 
;;;;           Author: Erick Gallesio [eg@unice.fr]
;;;;    Creation date: 30-May-2001 18:30 (eg)
;;;; Last file update: 19-Sep-2009 23:56 (eg)
;;;;


;;;; ======================================================================
;;;;
;;;;	<gtk-object> class ...
;;;;
;;;; ======================================================================
(define-class <gtk-object> ()
  ()
  :metaclass <gtk-virtual-slots-metaclass>)


;;;; ======================================================================
;;;;
;;;;	<destroyed-object> class ...
;;;;
;;;; ======================================================================
(define-class <destroyed-object> () ())


;;;; ======================================================================
;;;;
;;;;	<gtk-widget> class ...
;;;;
;;;; ======================================================================
(define (%widget-data-get widget key default)
  (key-get (slot-ref widget '%data) key default))

(define (%widget-data-set! widget key value)
  (let ((data (slot-ref widget '%data)))
    (slot-set! widget
	       '%data
	       (key-set! data key value))))

(define-class <gtk-widget> (<gtk-object>)
  ((wid		:getter 	wid)		;; Widget Id
   (%event 	:init-form 	'())		;; Private event handler
   (%data	:init-form 	'())		;; Private data	
   (show	:init-form	#t
		:init-keyword	:show)
   (parent	:accessor     parent
		:init-keyword :parent
		:allocation   :virtual
		:slot-ref (lambda (o)
			    (let ((p (gtk-widget-get-parent (slot-ref o 'wid))))
			      (if (eq? p #void) #f (diw p))))
		:slot-set! (lambda (o v)
    ;;// PROBLEM			     
			     (if (pair? v)
				 (apply container-add! (car v) o (cdr v))
				 (container-add! v o))))
   (can-default	:accessor     can-default
		:init-keyword :can-default
   		:allocation   :gtk-property)
   (can-focus	:accessor     can-focus
		:init-keyword :can-focus
   		:allocation   :gtk-property)
   (has-default :accessor     has-default
		:init-keyword :has-default
		:allocation   :gtk-property)
   (has-focus	:accessor     has-focus
		:init-keyword :has-focus
   		:allocation   :gtk-property)
   (height-request :accessor  height-request
		:init-keyword :height-request
		:allocation   :gtk-property)
   (name	:accessor     name
		:init-keyword :name
		:allocation   :gtk-property)
   (visible	:accessor     visible
		:init-keyword :visible
		:allocation   :gtk-property)
   (sensitive	:accessor     sensitive
		:init-keyword :sensitive
		:allocation   :gtk-property)
   (width-request :accessor  width-request
		:init-keyword :width-request
		:allocation   :gtk-property)
   (width	:accessor     width
		:init-keyword :width
		:allocation   :virtual
		:slot-ref     gtklos-width
		:slot-set!    (lambda (o v)
				(let ((h (slot-ref o 'height-request)))
				  (gtk-widget-set-size-request (slot-ref o 'wid)
							       v
							       h))))
   (height	:accessor     height
		:init-keyword :height
		:allocation   :virtual
		:slot-ref     gtklos-height
		:slot-set!    (lambda (o v)
				(let ((w (slot-ref o 'width-request)))
				  (gtk-widget-set-size-request (slot-ref o 'wid)
							       w
							       v))))
#;   (font-name	:accessor	font-name
		:init-keyword	:font-name
		:allocation	:gtk-property
		:gtk-name	"gtk-font-name")
   
;;//   (event	:accessor	event
;;//		:init-keyword	:event
;;//		:allocation	:virtual
;;//		:slot-ref	(lambda (o)
;;//				  (slot-ref o '%event))
;;//		:slot-set!	(lambda (o v)
;;//				  (let ((old-event (slot-ref o '%event)))
;;//				    (when old-event
;;//				      (disconnect-event-handler! old-event o))
;;//				    (connect-event-handler! v o)
;;//				    (slot-set! o '%event v))))
;;//   (widget-data :accessor     widget-data
;;//		:init-keyword :widget-data
;;//		:init-form    #f)

;;   		:allocation   :virtual ;; to ensure that can-default is #t
;;//		:slot-ref     (lambda (o)
;;//				(%gtk-arg-get (slot-ref o 'wid) :has_default))
;;//		:slot-set!    (lambda (o v)
;;//				(unless (slot-ref o 'can-default)
;;//				  ;; Force can-default to avoid GTK warning
;;//				  (slot-set! o 'can-default #t))
;;//				(update)
;;//				(%gtk-arg-set! (slot-ref o 'wid) :has_default v)
;;//				(update)))
   (tooltip	:accessor     tooltip
		:init-form    #f
		:init-keyword :tooltip
		:allocation   :virtual
		:slot-ref     (lambda (o)
				(%widget-data-get o :tooltip #f))
		:slot-set!    (lambda (o v)
				(let ((tt (%widget-data-get o :tooltip #f)))
				  (unless tt
				    (set! tt (gtk-tooltips-new))
				    (%widget-data-set! o :tooltip tt))
				  (if v
				      (let ((wid (slot-ref o 'wid)))
					(gtk-tooltips-enable tt)
					(gtk-tooltips-set-tip tt wid v ""))
				      (when tt
					(gtk-tooltips-disable tt)))
				  ;; Finally set 
				  (%widget-data-set! o :tooltip v))))
   ))

;======================================================================
;
;			Methods for Widgets
;
;====================================================================== 
(define-method realize-widget ((self <gtk-widget>) initargs)
  ;; Do nothing
  #f)

(define-method internal-arrange-widget ((self <gtk-widget>) initargs)
  ;; Do nothing
  #f)


(define-method initialize ((self <gtk-widget>) initargs)
  ;; Initialize %data slot as soon as possible 
  (slot-set! self '%data '())
  (realize-widget self initargs)
  ;(eprintf "NEXT sur ~S\n" self)
  (next-method self initargs)
  ;(eprintf "retour NEXT sur ~S\n" self)
  (internal-arrange-widget self initargs)
  (let ((wid (slot-ref self 'wid)))
    ;; Show object (eventually)
    (when (slot-ref self 'show)
      (gtk-widget-show wid))
    ;; Store self in GTk+ object to allow GTK <-> Scheme conversions
    (gtklos-wid-associate wid self)))


;;;
;;; Destroy
;;;
(define-method destroy ((w <gtk-widget>))
;;//  (let ((event (slot-ref w '%event)))	  	; Disconnect w from its  handler
;;//    (when event
;;//      (disconnect-event-handler! event w)))
  (gtk-widget-destroy (wid w))			; destroy the GTK widget
  (change-class w <destroyed-object>))		; Change class to <destroyed-object>


(define-method destroy (w)
  #f)

;;;
;;; Event connection
;;;
(define-method event-connect ((widget <gtk-widget>) name closure)
  (%signal-connect widget (slot-ref widget 'wid) name closure #f))

(define-method event-connect-after ((widget <gtk-widget>) name closure)
  (%signal-connect widget (slot-ref widget 'wid) name closure #t))


;;;; ======================================================================
;;;;
;;;;	<gtk-misc> class ...
;;;;
;;;; ======================================================================
(define-class <gtk-misc> (<gtk-widget>)
  ((xalign	:accessor     xalign
		:init-keyword :xalign
		:allocation   :gtk-property)
   (yalign	:accessor     yalign
		:init-keyword :yalign
		:allocation   :gtk-property)
   (xpad	:accessor     xpad
		:init-keyword :xpad
		:allocation   :gtk-property)
   (ypad	:accessor     ypad
		:init-keyword :ypad
		:allocation   :gtk-property)))
