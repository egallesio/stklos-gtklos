;;;;
;;;; label.stk	-- GTK labels
;;;; 
;;;; Copyright © 2001-2009 Erick Gallesio - I3S-CNRS/ESSI <eg@unice.fr>
;;;; 
;;;; 
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;; 
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
;;;; USA.
;;;; 
;;;;           Author: Erick Gallesio [eg@unice.fr]
;;;;    Creation date: 27-May-2001 22:23 (eg)
;;;; Last file update: 28-Jun-2009 18:39 (eg)
;;;;

;======================================================================
;
;		    C l a s s   < l a b e l >
;
;====================================================================== 
 
;; added
;;	- slot "wrap" which is not documented as a GTK+ arg.

(define-class <label> (<gtk-misc>)
  ((text	:accessor       text
		:init-keyword   :text
		:allocation     :virtual
		:slot-ref	(lambda (o)
				  (gtk-label-get-text (slot-ref o 'wid)))
		:slot-set!	(lambda (o v)
				  (gtk-label-set-text (slot-ref o 'wid) v)))
				  
;;//   (pattern	:accessor	pattern
;;//		:init-keyword	:pattern
;;//		:allocation	:gtk-arg)
  (justify	:accessor	justify
		:init-keyword	:justify
		:allocation	:virtual
		:slot-ref 	(lambda (o)
				  (gtk-label-get-justify (slot-ref o 'wid)))
		:slot-set!	(lambda (o v)
				  (gtk-label-set-justify (slot-ref o 'wid)
							 (case v
							   ((left)  0)
							   ((right)  1)
							   ((center) 2)
							   ((fill)   3)
							   (else     v)))))
  (use-markup	:accessor	use-markup
		:init-keyword	:use-markup
		:allocation	:virtual
		:slot-ref	(lambda (o)
				  (%widget-data-get o :markup #f))
		:slot-set!	(lambda (o v)
				  (gtk-label-set-use-markup (wid o) v)
				  (%widget-data-set! o :markup v)))
;;//   (wrap	:accessor	wrap
;;//		:init-keyword	:wrap
;;//		:allocation	:gtk-arg)))
  ))

(define-method realize-widget ((self <label>) initargs)
  (let ((lab (gtk-label-new "*label*")))
    (cpointer-type-set! lab 'gtk-label)
    (slot-set! self 'wid lab)))
